#include "chip8.hh"

const uint32_t Chip8::START_ADDRESS = 0x200;
const uint32_t Chip8::FONTSET_START_ADDRESS = 0x50;
const uint32_t Chip8::FONTSET_SIZE = 80;

uint8_t Chip8::fontset[FONTSET_SIZE] =
{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

Chip8::Chip8() {
    pc = START_ADDRESS;
}

Chip8::~Chip8() {

}

void Chip8::loadROM(const uint8_t* data, size_t size) {
    std::memcpy(&memory[0x200], data, size);
}

void Chip8::emulateCycle() {

}

void Chip8::00E0() {
	this->video.fill(0); // CLS, Clear the display
}

void Chip8::OP_00EE() {
	--sp;
	pc = stack[sp]; // RET, Return from subroutine
}

void Chip8::OP_1NNN() {
	uint16_t address = opcode & 0x0FFFu;
	pc = address; // JP addr, Jump to location nnn
}

void Chip8::OP_2NNN() {
	uint16_t address = opcode & 0x0FFFu;
	
	stack[sp] = pc;
	++sp;
	pc = address; // CALL addr, Call subroutine at nnn
}